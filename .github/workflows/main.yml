name: Deploy Blog

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main 
  workflow_dispatch:
    # Inputs the workflow expects.
    inputs:
      tfpath:
        description: 'TF File Path'     
        required: false
        default: 'ops/terraform'
      hugo_path:
        description: 'Hufo File Path'     
        required: false
        default: 'src'

env:
  AWS_REGION : "us-east-1"
# permission can be added at job level or workflow level    
# permissions:
#       id-token: write   # This is required for requesting the JWT through OIDC
#       contents: read    # This is required for actions/checkout
      
jobs:
  hugo-build:
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: write  # This is required for actions/checkout
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true  # Fetch Hugo themes (true OR recursive)
        fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_GH_OIDC_ROLE }}
        role-session-name: ${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.job }} 
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        extended: true

    # - name: get theme
    #   run:  git submodule add https://github.com/dillonzq/LoveIt.git themes/loveit	
    #   working-directory: ./src

    - name: Build
      run: hugo --buildFuture
      working-directory: ./src

    - name: Deploy
      run: aws s3 sync --size-only --region public s3://kcirtap.io
      working-directory: ./src


  terraform-plan:
    permissions:
      pull-requests: write
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_GH_OIDC_ROLE }}
          role-session-name: ${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.job }} 
          aws-region: ${{ env.AWS_REGION }}

      # - name: Run terraform
      #   uses: scott-doyland-burrows/gha-composite-terraform-iamlive@v1
      #   with:
      #     GhAppId: ${{ secrets.GHA_APP_ID }} # used to generate token to pull in terraform modules
      #     GhAppKey: ${{ secrets.GHA_APP_KEY }} # used to generate token to pull in terraform modules
      #     AwsRole: ${{ secrets.AWS_GH_OIDC_ROLE }} # AWS OIDC role that can access the statefile S3 bucket
      #     TerraformDir: ${{ vars.TF_ACTIONS_WORKING_DIR }}
      #     TerraformTfVars: ${{ github.workflow }} # .tfvars file
      #     TerraformStateFileBucket: kcirtap-tf-state #${{ secrets.TF_STATEFILE_BUCKET }} # S3 bucket to store statefile
      #     # TerraformAction: apply # terraform action
      #     IamLive: true # run iamlive

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}
        
      - name: Terraform Plan
        id: plan
        run: terraform plan
        continue-on-error: true
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

