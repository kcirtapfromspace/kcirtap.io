name: Deploy Blog

on:
  repository_dispatch:
    types: [obsidian_push]
  push:
    branches:
      - main
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:    
      - main
  release:
    types: [published]
  workflow_dispatch:


env:
  AWS_REGION : "us-east-1"
      
jobs:
  check-for-deploy:
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.check-commit-message.outputs.DEPLOY }}
      content_repo_sha: ${{ steps.extract-sha.outputs.CONTENT_REPO_SHA }}
    steps:
    - name: Check commit message
      id: check-commit-message
      run: |
        if echo "${{ github.event.head_commit.message }}" | grep -Pq '(?s)chore\((.+)\):\srelease\s\d+\.\d+\.\d+'; then
          echo "DEPLOY=true" >> $GITHUB_OUTPUT
        else
          echo "DEPLOY=false" >> $GITHUB_OUTPUT
        fi

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0


    - name: Extract content repo commit SHA
      id: extract-sha
      run: |
        CONTENT_REPO_SHA=$(git log --oneline | grep -oPm1 '(?<=docs: Obsidian Disbatch ref: refs/heads/main, sha: )[0-9a-f]{40}')
        echo "CONTENT_REPO_SHA=$CONTENT_REPO_SHA" >> $GITHUB_OUTPUT

  hugo-build:
    needs: [check-for-deploy,terraform-plan]
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: write  # This is required for actions/checkout
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive  # Fetch Hugo themes (true OR recursive)
        fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
        ref: ${{ github.event.client_payload.ref }}
    - run: echo ${{ github.event.client_payload.sha }}

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.KFS_OBSIDIAN_DEPLOY_KEY }}

    - name: Clone obsidian content
      if: needs.check-for-deploy.outputs.deploy == 'false'
      run: |
        git config --global user.email "github-actions@example.com"
        git config --global user.name "GitHub Actions"
        git clone --filter=blob:none --no-checkout --sparse  git@github.com:kcirtapfromspace/obsidian.git obsidian
        cd obsidian
        git sparse-checkout init --cone
        git fetch origin ${{ github.event.client_payload.sha }}
        git checkout ${{ github.event.client_payload.sha }}
        git sparse-checkout set the_archives
        ls -lah
        mv the_archives ../src/content/
        
    - name: Prod - Clone obsidian content
      if: needs.check-for-deploy.outputs.deploy == 'true'
      run: |
        git config --global user.email "github-actions@example.com"
        git config --global user.name "GitHub Actions"
        git clone --filter=blob:none --no-checkout --sparse git@github.com:kcirtapfromspace/obsidian.git obsidian
        cd obsidian
        git sparse-checkout init --cone
        git fetch origin ${{ needs.check-for-deploy.outputs.content_repo_sha }}
        git checkout ${{ needs.check-for-deploy.outputs.content_repo_sha }}
        git sparse-checkout set the_archives
        ls -lah
        mv the_archives ../src/content/

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_GH_OIDC_ROLE }}
        role-session-name: ${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.job }} 
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v3
      with:
        hugo-version: 'latest'
        extended: true

    - name: Hugo Config
      if: needs.check-for-deploy.outputs.deploy == 'true'
      run: |
        echo -e "googleAnalytics = \"${{ secrets.GOOGLE_ANALYTICS_ID }}\"\n[params.analytics.google]\n    id = \"${{ secrets.GOOGLE_ANALYTICS_ID }}\"" >> config/${{ vars.HUGO_ENVIRONMENT }}/config.toml
        cat config/${{ vars.HUGO_ENVIRONMENT }}/config.toml
      working-directory: ./src

    - name: Build
      run: |
        hugo mod tidy
        hugo mod get -u
        hugo mod graph
        hugo --gc  --minify --cleanDestinationDir --destination public --ignoreCache --environment ${{ vars.HUGO_ENVIRONMENT }}
      working-directory: ./src

    - name: Deploy Dry Run
      if: needs.check-for-deploy.outputs.deploy == 'false'
      run: |
        echo "DEPLOY: ${{ needs.check-for-deploy.outputs.deploy }}"
        hugo deploy --maxDeletes -1 --invalidateCDN --dryRun --environment ${{ vars.HUGO_ENVIRONMENT }}
      working-directory: ./src

    - name: Prod - Hugo Deploy
      if: needs.check-for-deploy.outputs.deploy == 'true'
      run: |
        echo "DEPLOY: ${{ needs.check-for-deploy.outputs.deploy }}"
        hugo deploy --maxDeletes -1 --invalidateCDN --environment ${{ vars.HUGO_ENVIRONMENT }} 
      working-directory: ./src

  terraform-plan:
    needs: check-for-deploy
    permissions:
      pull-requests: write
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_GH_OIDC_ROLE }}
          role-session-name: ${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.job }} 
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -diff -recursive -no-color
        continue-on-error: true
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}

      - name: Terraform Init
        id: init
        run: terraform init -no-color
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}
        
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}

      - name: Terraform Apply
        if: needs.check-for-deploy.outputs.deploy == 'true'
        id: apply
        run: |
          terraform apply -no-color -auto-approve
        continue-on-error: true
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
